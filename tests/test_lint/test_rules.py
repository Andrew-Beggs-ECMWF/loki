import pytest

from loki import FP, SourceFile
from loki.lint import rules, Reporter, Linter, DefaultHandler


def run_linter(sourcefile, rule_list, config=None, handlers=None):
    """
    Run the linter for the given source file with the specified list of rules.
    """
    reporter = Reporter(handlers)
    linter = Linter(reporter, rules=rule_list, config=config)
    linter.check(sourcefile)
    return linter


@pytest.mark.parametrize('frontend, banned_statements, passes', [
    (FP, [], True),
    (FP, ['GO TO'], False),
    (FP, ['GO TO', 'RETURN'], False),
    (FP, ['RETURN'], True)])
def test_banned_statements(frontend, banned_statements, passes):
    '''Test for banned statements.'''
    fcode = """
subroutine banned_statements()
integer :: dummy

dummy = 5
call foobar(dummy)
go to 100
print *, dummy
100 continue
end subroutine banned_statements
    """
    source = SourceFile.from_source(fcode, frontend=frontend)
    messages = []
    handler = DefaultHandler(target=messages.append)
    config = {'BannedStatementsRule': {'banned': banned_statements}}
    _ = run_linter(source, [rules.BannedStatementsRule], config=config, handlers=[handler])

    assert len(messages) == (0 if passes else 1)
    keywords = ('BannedStatementsRule', 'GO TO')
    assert all(all(keyword in msg for keyword in keywords) for msg in messages)


@pytest.mark.parametrize('frontend', [FP])
def test_implicit_none(frontend):
    fcode = """
subroutine routine_okay
implicit none
integer :: a
a = 5
contains
subroutine contained_routine_okay
integer :: b
b = 5
end subroutine contained_routine_okay
end subroutine routine_okay

module mod_okay
implicit none
contains
subroutine contained_mod_routine_okay
integer :: a
a = 5
end subroutine contained_mod_routine_okay
end module mod_okay

subroutine routine_not_okay
! This should report
integer :: a
a = 5
contains
subroutine contained_not_okay_routine_okay
implicit none
integer :: b
b = 5
end subroutine contained_not_okay_routine_okay
end subroutine routine_not_okay

module mod_not_okay
contains
subroutine contained_mod_not_okay_routine_okay
implicit none
integer :: a
a = 5
end subroutine contained_mod_not_okay_routine_okay
end module mod_not_okay

subroutine routine_also_not_okay
! This should report
integer :: a
a = 5
contains
subroutine contained_routine_not_okay
! This should report
integer :: b
b = 5
end subroutine contained_routine_not_okay
end subroutine routine_also_not_okay

module mod_also_not_okay
contains
subroutine contained_mod_routine_not_okay
! This should report
integer :: a
a = 5
contains
subroutine contained_contained_routine_not_okay
! This should report
integer :: b
b = 5
end subroutine contained_contained_routine_not_okay
end subroutine contained_mod_routine_not_okay
end module mod_also_not_okay
    """.strip()
    source = SourceFile.from_source(fcode, frontend=frontend)
    messages = []
    handler = DefaultHandler(target=messages.append)
    _ = run_linter(source, [rules.ImplicitNoneRule], handlers=[handler])

    assert len(messages) == 5
    assert all('"IMPLICIT NONE"' in msg for msg in messages)
    assert sum('"routine_not_okay"' in msg for msg in messages) == 1
    assert sum('"routine_also_not_okay"' in msg for msg in messages) == 1
    assert sum('"contained_routine_not_okay"' in msg for msg in messages) == 1
    assert sum('"contained_mod_routine_not_okay"' in msg for msg in messages) == 1
    assert sum('"contained_contained_routine_not_okay"' in msg for msg in messages) == 1


@pytest.mark.parametrize('frontend, max_num_arguments, passes', [
    (FP, 10, True),
    (FP, 8, True),
    (FP, 7, False),
    (FP, 1, False)])
def test_max_dummy_args(frontend, max_num_arguments, passes):
    '''Test for different maximum allowed number of dummy arguments and
    content of messages generated by MaxDummyArgsRule.'''
    fcode = """
subroutine routine_max_dummy_args(a, b, c, d, e, f, g, h)
integer, intent(in) :: a, b, c, d, e, f, g, h

print *, a, b, c, d, e, f, g, h
end subroutine routine_max_dummy_args
    """.strip()
    source = SourceFile.from_source(fcode, frontend=frontend)
    messages = []
    handler = DefaultHandler(target=messages.append)
    config = {'MaxDummyArgsRule': {'max_num_arguments': max_num_arguments}}
    _ = run_linter(source, [rules.MaxDummyArgsRule], config=config, handlers=[handler])

    assert len(messages) == (0 if passes else 1)
    keywords = ('MaxDummyArgsRule', '8', str(max_num_arguments), 'routine_max_dummy_args')
    assert all(all(keyword in msg for keyword in keywords) for msg in messages)
